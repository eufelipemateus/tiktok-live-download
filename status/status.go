package status

import (
	"context"
	"encoding/json"
	"log"
	"time"

	"github.com/chromedp/chromedp"
	"github.com/eufelipemateus/go-video/interfaces"
)

func IsLiveOffline(url string) (bool, error) {

	opts := append(chromedp.DefaultExecAllocatorOptions[:],
		chromedp.Flag("headless", true),                       // Executar no modo headless
		chromedp.Flag("disable-gpu", true),                     // Desativar GPU
		chromedp.Flag("blink-settings", "imagesEnabled=false"), // Desativa imagens
	)

	// Criando um contexto de chromedp com timeout
	ctx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer cancel()

	ctx, cancel = chromedp.NewContext(ctx)
	defer cancel()

	// Configurando o timeout
	timeoutCtx, cancel := context.WithTimeout(ctx, 1*time.Minute)
	defer cancel()

	// Variável para armazenar o texto extraído
	var pageContent string

	// Executa o Chrome e carrega a página
	err := chromedp.Run(timeoutCtx,
		chromedp.Navigate(url),
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.InnerHTML("#SIGI_STATE", &pageContent, chromedp.ByID),
	)
	if err != nil {
		return false, err
	}

	return getStatusLive(pageContent) == 4, nil // Live está online ou não foi encontrado o texto
}

func getStatusLive(metada string) int {
	var data interfaces.AutoGenerated
	if err := json.Unmarshal([]byte(metada), &data); err != nil {
		log.Fatalf("Erro ao deserializar o JSON: %v", err)
	}

	return data.LiveRoom.LiveRoomUserInfo.LiveRoom.Status
}
